1.  SELECT u.full_name, e.title, e.city, e.start_date
    FROM Users u
    JOIN Registrations r ON u.user_id = r.user_id
    JOIN Events e ON r.event_id = e.event_id
    WHERE e.status = 'upcoming' AND u.city = e.city
    ORDER BY e.start_date;


2.  SELECT e.title, AVG(f.rating) AS avg_rating, COUNT(f.feedback_id) AS feedback_count
    FROM Events e
    JOIN Feedback f ON e.event_id = f.event_id
    GROUP BY e.event_id
    HAVING COUNT(f.feedback_id) >= 10
    ORDER BY avg_rating DESC;

3.  SELECT u.*
    FROM Users u
    LEFT JOIN Registrations r ON u.user_id = r.user_id AND r.registration_date >= CURDATE() - INTERVAL 90 DAY
    WHERE r.registration_id IS NULL;

4.  SELECT e.title, COUNT(s.session_id) AS session_count
    FROM Events e
    JOIN Sessions s ON e.event_id = s.event_id
    WHERE TIME(s.start_time) BETWEEN '10:00:00' AND '12:00:00'
    GROUP BY e.event_id;

5.  SELECT u.city, COUNT(DISTINCT r.user_id) AS total_users
    FROM Users u
    JOIN Registrations r ON u.user_id = r.user_id
    GROUP BY u.city
    ORDER BY total_users DESC
    LIMIT 5;

6.  SELECT e.title,
       SUM(CASE WHEN r.resource_type = 'pdf' THEN 1 ELSE 0 END) AS pdf_count,
       SUM(CASE WHEN r.resource_type = 'image' THEN 1 ELSE 0 END) AS image_count,
       SUM(CASE WHEN r.resource_type = 'link' THEN 1 ELSE 0 END) AS link_count
    FROM Events e
    LEFT JOIN Resources r ON e.event_id = r.event_id
    GROUP BY e.event_id;

7.  SELECT u.full_name, e.title AS event_name, f.rating, f.comments
    FROM Feedback f
    JOIN Users u ON f.user_id = u.user_id
    JOIN Events e ON f.event_id = e.event_id
    WHERE f.rating < 3;

8.  SELECT e.title, COUNT(s.session_id) AS session_count
    FROM Events e
    LEFT JOIN Sessions s ON e.event_id = s.event_id
    WHERE e.status = 'upcoming'
    GROUP BY e.event_id;

9.  SELECT u.full_name AS organizer, 
       e.status, COUNT(e.event_id) AS event_count
    FROM Users u
    JOIN Events e ON u.user_id = e.organizer_id
    GROUP BY u.user_id, e.status;

10. SELECT DISTINCT e.title
    FROM Events e
    JOIN Registrations r ON e.event_id = r.event_id
    LEFT JOIN Feedback f ON r.event_id = f.event_id
    WHERE f.feedback_id IS NULL;

11. SELECT registration_date, COUNT(*) AS new_users
    FROM Users
    WHERE registration_date >= CURDATE() - INTERVAL 7 DAY
    GROUP BY registration_date;

12. SELECT e.title, COUNT(s.session_id) AS session_count
    FROM Events e
    JOIN Sessions s ON e.event_id = s.event_id
    GROUP BY e.event_id
    ORDER BY session_count DESC
    LIMIT 1;

13. SELECT e.city, AVG(f.rating) AS average_rating
    FROM Events e
    JOIN Feedback f ON e.event_id = f.event_id
    GROUP BY e.city;

14. SELECT e.title, COUNT(r.registration_id) AS total_registrations
    FROM Events e
    JOIN Registrations r ON e.event_id = r.event_id
    GROUP BY e.event_id
    ORDER BY total_registrations DESC
    LIMIT 3;

15. SELECT s1.event_id, s1.title AS session1, s2.title AS session2
    FROM Sessions s1
    JOIN Sessions s2 ON s1.event_id = s2.event_id AND s1.session_id < s2.session_id
    WHERE s1.start_time < s2.end_time AND s2.start_time < s1.end_time;

16. SELECT *
    FROM Users u
    WHERE registration_date >= CURDATE() - INTERVAL 30 DAY
    AND NOT EXISTS (
        SELECT 1 FROM Registrations r WHERE r.user_id = u.user_id
    );

17. SELECT speaker_name, COUNT(*) AS session_count
    FROM Sessions
    GROUP BY speaker_name
    HAVING COUNT(*) > 1;

18. SELECT e.title
    FROM Events e
    LEFT JOIN Resources r ON e.event_id = r.event_id
    WHERE r.resource_id IS NULL;

19. SELECT e.title, COUNT(DISTINCT r.registration_id) AS registrations,
       AVG(f.rating) AS avg_rating
    FROM Events e
    LEFT JOIN Registrations r ON e.event_id = r.event_id
    LEFT JOIN Feedback f ON e.event_id = f.event_id
    WHERE e.status = 'completed'
    GROUP BY e.event_id;


20. SELECT u.full_name,
       COUNT(DISTINCT r.event_id) AS events_attended,
       COUNT(DISTINCT f.feedback_id) AS feedbacks_given
    FROM Users u
    LEFT JOIN Registrations r ON u.user_id = r.user_id
    LEFT JOIN Feedback f ON u.user_id = f.user_id
    GROUP BY u.user_id;

21. SELECT u.full_name, COUNT(f.feedback_id) AS total_feedbacks
    FROM Users u
    JOIN Feedback f ON u.user_id = f.user_id
    GROUP BY u.user_id
    ORDER BY total_feedbacks DESC
    LIMIT 5;

22. SELECT user_id, event_id, COUNT(*) AS duplicate_count
    FROM Registrations
    GROUP BY user_id, event_id
    HAVING COUNT(*) > 1;

23. SELECT DATE_FORMAT(registration_date, '%Y-%m') AS month,
       COUNT(*) AS total_registrations
    FROM Registrations
    WHERE registration_date >= CURDATE() - INTERVAL 12 MONTH
    GROUP BY month
    ORDER BY month;

24. SELECT e.title,
       ROUND(AVG(TIMESTAMPDIFF(MINUTE, s.start_time, s.end_time)), 2) AS avg_duration_minutes
    FROM Events e
    JOIN Sessions s ON e.event_id = s.event_id
    GROUP BY e.event_id;

25. SELECT e.event_id, e.title
    FROM Events e
    LEFT JOIN Sessions s ON e.event_id = s.event_id
    WHERE s.session_id IS NULL;








